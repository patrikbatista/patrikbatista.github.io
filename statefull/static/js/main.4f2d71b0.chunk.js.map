{"version":3,"sources":["components/Header.jsx","data.js","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/SearchBar.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","movies","title","subtitle","storyline","rating","imagePath","bookmarked","genre","Rating","this","props","data-testid","defaultProps","MovieCard","movie","alt","src","MovieList","map","key","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","id","htmlFor","value","onChange","type","name","checked","AddMovie","handleChange","event","target","selected","setState","state","handleClick","bind","onClick","data","createInputText","createInpuTextArea","createInputNumber","createInpuSelect","MovieLibrary","adicionarFilme","filme","filteredMovie","filter","includes","filterMovies","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f2d71b0.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number };\n\nRating.defaultProps = {\n  rating: 'undefined',\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default MovieList;\n","// implement SearchBar component here\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  render() {\n    const { searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange } = this.props;\n\n    return (\n      <form data-testid=\"search-bar-form\" id=\"fr\">\n        <p>Pesquisa de filmes</p>\n        <label data-testid=\"text-input-label\" htmlFor=\"searchText\">\n          Inclui o texto\n          <input\n            value={ searchText }\n            onChange={ onSearchTextChange }\n            data-testid=\"text-input\"\n            type=\"text\"\n            name=\"searchText\"\n          />\n        </label>\n        <label data-testid=\"checkbox-input-label\" htmlFor=\"bookmarkedOnly\">\n          Mostrar somente favoritos\n          <input\n            type=\"checkbox\"\n            checked={ bookmarkedOnly }\n            onChange={ onBookmarkedChange }\n            data-testid=\"checkbox-input\"\n            name=\"bookmarkedOnly\"\n          />\n        </label>\n        <label data-testid=\"select-input-label\" htmlFor=\"selectedGenre\">\n          Filtrar por gênero\n          <select\n            name=\"selectedGenre\"\n            value={ selectedGenre }\n            onChange={ onSelectedGenreChange }\n            data-testid=\"select-input\"\n          >\n            <option data-testid=\"select-option\" value=\"\">Todos</option>\n            <option data-testid=\"select-option\" value=\"action\">Ação</option>\n            <option data-testid=\"select-option\" value=\"comedy\">Comédia</option>\n            <option data-testid=\"select-option\" value=\"thriller\">Suspense</option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string,\n  onSearchTextChange: PropTypes.func,\n  bookmarkedOnly: PropTypes.bool,\n  onBookmarkedChange: PropTypes.func,\n  selectedGenre: PropTypes.string,\n  onSelectedGenreChange: PropTypes.func,\n}.isRequired;\n\nexport default SearchBar;\n","// implement AddMovie component here\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddMovie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      subtitle: '',\n      rating: 0,\n      imagePath: '',\n      storyline: '',\n      genre: 'action',\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { onClick } = this.props;\n    onClick(this.state);\n    this.setState(\n      {\n        subtitle: '',\n        title: '',\n        imagePath: '',\n        storyline: '',\n        rating: 0,\n        genre: 'action',\n      },\n    );\n  }\n\n  handleChange = (event) => {\n    const { name, value, selected, type } = event.target;\n\n    if (type === 'select') {\n      this.setState({ [name]: selected });\n    }\n    this.setState({ [name]: value });\n  }\n\n  createInputText(name, value, data) {\n    return (\n      <input\n        type=\"text\"\n        name={ name }\n        value={ value }\n        data-testid={ data }\n        onChange={ this.handleChange }\n      />\n    );\n  }\n\n  createInputNumber(name, value, data) {\n    return (\n      <input\n        type=\"number\"\n        name={ name }\n        value={ value }\n        data-testid={ data }\n        onChange={ this.handleChange }\n      />\n    );\n  }\n\n  createInpuTextArea(name, value, data) {\n    return (\n      <textarea\n        name={ name }\n        value={ value }\n        data-testid={ data }\n        onChange={ this.handleChange }\n      />\n    );\n  }\n\n  createInpuSelect(name, value, data) {\n    return (\n      <select\n        name={ name }\n        selected={ value }\n        data-testid={ data }\n        onChange={ this.handleChange }\n      >\n        <option data-testid=\"genre-option\" value=\"action\">Ação</option>\n        <option data-testid=\"genre-option\" value=\"comedy\">Comédia</option>\n        <option data-testid=\"genre-option\" value=\"thriller\">Suspense</option>\n\n      </select>\n    );\n  }\n\n  render() {\n    const { title, subtitle, rating, imagePath, storyline, genre } = this.state;\n    return (\n      <form data-testid=\"add-movie-form\">\n        <label data-testid=\"title-input-label\" htmlFor=\"title\">\n          Título\n          {this.createInputText('title', title, 'title-input')}\n        </label>\n\n        <label data-testid=\"subtitle-input-label\" htmlFor=\"subtitle\">\n          Subtítulo\n          {this.createInputText('subtitle', subtitle, 'subtitle-input')}\n        </label>\n\n        <label data-testid=\"image-input-label\" htmlFor=\"image\">\n          Imagem\n          {this.createInputText('imagePath', imagePath, 'image-input')}\n        </label>\n\n        <label data-testid=\"storyline-input-label\" htmlFor=\"storyline\">\n          Sinopse\n          {this.createInpuTextArea('storyline', storyline, 'storyline-input')}\n        </label>\n\n        <label data-testid=\"rating-input-label\" htmlFor=\"rating\">\n          Avaliação\n          {this.createInputNumber('rating', rating, 'rating-input')}\n        </label>\n\n        {/* requisito 13 */}\n        <label data-testid=\"genre-input-label\" htmlFor=\"Genre\">\n          Gênero\n          {this.createInpuSelect('selectedGenre', genre, 'genre-input')}\n\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"send-button\"\n          onClick={ this.handleClick }\n        >\n          Adicionar filme\n        </button>\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = { onClick: PropTypes.func.isRequired };\nexport default AddMovie;\n","// implement MovieLibrary component here\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieList from './MovieList';\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\n\nclass MovieLibrary extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { movies } = props;\n\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies,\n    };\n    this.adicionarFilme = this.adicionarFilme.bind(this);\n  }\n\n  handleChange = ({ target }) => {\n    const { name, type } = target;\n\n    const value = type === 'checkbox' ? target.checked : target.value;\n    this.setState({ [name]: value });\n  }\n\n  adicionarFilme(filme) {\n    const { movies } = this.state;\n    this.setState({ movies: [...movies, filme] });\n  }\n\n  filterMovies({ searchText, bookmarkedOnly, selectedGenre, movies }) {\n    let filteredMovie = movies.filter((movie) => movie.title.includes(searchText)\n    || movie.subtitle.includes(searchText)\n    || movie.storyline.includes(searchText));\n    if (bookmarkedOnly === true) {\n      filteredMovie = filteredMovie.filter((movie) => movie.bookmarked === true);\n    }\n    filteredMovie = filteredMovie.filter((movie) => movie.genre.includes(selectedGenre));\n    return filteredMovie;\n  }\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre } = this.state;\n    return (\n      <div>\n        <SearchBar\n          searchText={ searchText }\n          onSearchTextChange={ this.handleChange }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.handleChange }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.handleChange }\n        />\n        <MovieList movies={ this.filterMovies(this.state) } />\n        <AddMovie onClick={ this.adicionarFilme } />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\nexport default MovieLibrary;\n","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport data from './data';\nimport MovieLibrary from './components/MovieLibrary';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={ data } />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}